package com.Level2Tasks;

import java.io.*;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.Base64;
import java.util.Scanner;
import javax.crypto.Cipher;
import javax.crypto.spec.SecretKeySpec;

public class Encrypt_Decrypt_Files {

    public static void main(String[] args) {
        try {
            BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
            System.out.println("Choose an operation:");
            System.out.println("1. Encryption");
            System.out.println("2. Decryption");
            int choice = Integer.parseInt(br.readLine());

            if (choice == 1) {
                System.out.print("Enter the path of the file to encrypt: ");
                String inputFile = br.readLine();
                System.out.print("Enter the path of the output encrypted file: ");
                String outputFile = br.readLine();
                System.out.print("Enter the encryption key: ");
                String key = br.readLine();
                encryptFile(inputFile, outputFile, key);
                System.out.println("File encrypted successfully.");
            } else if (choice == 2) {
                System.out.print("Enter the path of the file to decrypt: ");
                String inputFile = br.readLine();
                System.out.print("Enter the path of the output decrypted file: ");
                String outputFile = br.readLine();
                System.out.print("Enter the decryption key: ");
                String key = br.readLine();
                decryptFile(inputFile, outputFile, key);
                System.out.println("File decrypted successfully.");
            } else {
                System.out.println("Invalid choice. Please choose 1 for encryption or 2 for decryption.");
            }
        } catch (IOException e) {
            System.err.println("An error occurred: " + e.getMessage());
        }
    }

    public static void encryptFile(String inputFile, String outputFile, String keyString) throws IOException {
        try {
            byte[] key = keyString.getBytes("UTF-8");
            SecretKeySpec secretKeySpec = new SecretKeySpec(key, "AES");
            

            Cipher cipher = Cipher.getInstance("AES");
            cipher.init(Cipher.ENCRYPT_MODE, secretKeySpec);

            byte[] fileData = Files.readAllBytes(Paths.get(inputFile));
            byte[] encryptedData = cipher.doFinal(fileData);


            try (FileOutputStream outputStream = new FileOutputStream(outputFile)) {
                outputStream.write(Base64.getEncoder().encode(encryptedData));
            }
        } catch (Exception e) {
            System.err.println("Encryption failed: " + e.getMessage());
        }
    }

    public static void decryptFile(String inputFile, String outputFile, String keyString) throws IOException {
        try {
            byte[] key = keyString.getBytes("UTF-8");
            SecretKeySpec secretKeySpec = new SecretKeySpec(key, "AES");

            Cipher cipher = Cipher.getInstance("AES");
            cipher.init(Cipher.DECRYPT_MODE, secretKeySpec);

            byte[] encryptedData = Files.readAllBytes(Paths.get(inputFile));
            byte[] decryptedData = cipher.doFinal(Base64.getDecoder().decode(encryptedData));

            try (FileOutputStream outputStream = new FileOutputStream(outputFile)) {
                outputStream.write(decryptedData);
            }
        } catch (Exception e) {
            System.err.println("Decryption failed: " + e.getMessage());
        }
    }
}
